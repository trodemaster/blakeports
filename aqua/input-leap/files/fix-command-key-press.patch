--- a/src/lib/platform/OSXKeyState.cpp
+++ b/src/lib/platform/OSXKeyState.cpp
@@ -498,6 +498,8 @@ static io_connect_t getEventDriver(void)
 void OSXKeyState::postHIDVirtualKey(const std::uint8_t virtualKeyCode, const bool postDown)
 {
     static std::uint32_t modifiers = 0;
+    static bool leftCommandPressed = false;
+    static bool rightCommandPressed = false;
 
     NXEventData event;
     IOGPoint loc = { 0, 0 };
@@ -528,11 +530,25 @@ void OSXKeyState::postHIDVirtualKey(const std::uint8_t virtualKeyCode, const boo
                 break;
         case kVK_Command:
                 modifiersDelta = NX_COMMANDMASK | NX_DEVICELCMDKEYMASK;
-                m_superPressed = postDown;
+                
+                // Prevent processing duplicate state changes
+                if (leftCommandPressed == postDown) {
+                    return; // Skip if already in this state
+                }
+                
+                leftCommandPressed = postDown;
+                m_superPressed = leftCommandPressed || rightCommandPressed;
                 break;
         case kVK_RightCommand:
                 modifiersDelta = NX_COMMANDMASK | NX_DEVICERCMDKEYMASK;
-                m_superPressed = postDown;
+                
+                // Prevent processing duplicate state changes
+                if (rightCommandPressed == postDown) {
+                    return; // Skip if already in this state
+                }
+                
+                rightCommandPressed = postDown;
+                m_superPressed = leftCommandPressed || rightCommandPressed;
                 break;
         case kVK_Option:
                 modifiersDelta = NX_ALTERNATEMASK | NX_DEVICELALTKEYMASK;
--- a/src/lib/inputleap/KeyMap.cpp
+++ b/src/lib/inputleap/KeyMap.cpp
@@ -988,6 +988,15 @@ KeyMap::addKeystrokes(EKeystroke type, const KeyItem& keyItem,
 
     case kKeystrokeModify:
     case kKeystrokeUnmodify:
+        // Skip redundant Command key press/release cycles to prevent
+        // Command+C typing 'c' instead of copying
+        if ((keyItem.m_generates & (KeyModifierSuper | KeyModifierMeta)) && 
+            type == kKeystrokeModify && 
+            activeModifiers.count(keyItem.m_generates) > 0) {
+            // Command key is already active, don't generate additional press
+            return;
+        }
+        
         if (keyItem.m_lock) {
             // we assume there's just one button for this modifier
             if (m_halfDuplex.count(button) > 0) {