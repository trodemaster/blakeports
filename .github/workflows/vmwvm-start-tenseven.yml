name: VMware VM Start - TenSeven

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'Start the 10.7 VM'
        required: true
        default: 'tenseven-test'

jobs:
  start-vm:
    runs-on: [self-hosted, ubuntu, noble]
    outputs:
      vm_ip: ${{ steps.get-vm-ip.outputs.vm_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Start VMware VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HYPERVISOR_HOST }}
          username: ${{ secrets.HYPERVISOR_USERNAME }}
          key: ${{ secrets.HYPERVISOR_KEY }}
          debug: true
          script: |
            export VMW_SOURCE_VM_PATH="/Volumes/JonesFarm/actions-runners/Mac OS X 10.7.vmwarevm/Mac OS X 10.7.vmx"
            export VMW_VM_PATH="/Volumes/JonesFarm/actions-runners/tenseven-runner/tenseven-runner.vmx"
            export VMW_VM_NAME="tenseven-runner"
            VMRUN="/Applications/VMware Fusion.app/Contents/Public/vmrun"
            echo Source VM Path: "$VMW_SOURCE_VM_PATH"
            echo VM Path: "$VMW_VM_PATH"
            echo VM Name: "$VMW_VM_NAME"
            
            # Check if VM is already running
            echo "Checking if VM is already running..."
            if "$VMRUN" -T fusion list | grep -q "$VMW_VM_PATH"; then
                echo "✅ VM is already running: $VMW_VM_PATH"
                echo "✅ Exiting gracefully - no action needed"
                exit 0
            fi
            
            # List current VMs
            echo "Current VMs:"
            "$VMRUN" -T fusion list
            
            # Create destination directory if it doesn't exist
            DEST_DIR="$(dirname "$VMW_VM_PATH")"
            echo "Checking destination directory: $DEST_DIR"
            if [ ! -d "$DEST_DIR" ]; then
                echo "Directory doesn't exist, creating it..."
                mkdir -p "$DEST_DIR"
            else
                echo "Directory already exists"
            fi
            
            # Create linked clone from source VM
            echo "Creating linked clone..."
            "$VMRUN" -T fusion clone "$VMW_SOURCE_VM_PATH" "$VMW_VM_PATH" linked -cloneName="$VMW_VM_NAME"
            
            # Start the cloned VM in headless mode
            echo "Starting cloned VM in headless mode..."
            "$VMRUN" -T fusion start "$VMW_VM_PATH" nogui
            
            # Verify VM is running
            echo "Running VMs after start:"
            "$VMRUN" -T fusion list
            
            # Wait for VM to boot and get IP address
            echo "Waiting for VM to boot and get IP address..."
            sleep 30
      
      - name: Get VM IP Address
        id: get-vm-ip
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HYPERVISOR_HOST }}
          username: ${{ secrets.HYPERVISOR_USERNAME }}
          key: ${{ secrets.HYPERVISOR_KEY }}
          debug: true
          script: |
            export VMW_VM_PATH="/Volumes/JonesFarm/actions-runners/tenseven-runner/tenseven-runner.vmx"
            VMRUN="/Applications/VMware Fusion.app/Contents/Public/vmrun"
            
            # Get VM IP address (vmrun -wait handles the waiting automatically)
            echo "Getting VM IP address..."
            VM_IP="$("$VMRUN" -T fusion getGuestIPAddress "$VMW_VM_PATH" -wait)"
            
            if [ -z "$VM_IP" ]; then
                echo "❌ Failed to get VM IP address"
                exit 1
            fi
            
            echo "✅ VM IP Address: $VM_IP"
            echo "vm_ip=$VM_IP" >> "$GITHUB_OUTPUT"
