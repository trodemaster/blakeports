#!/bin/bash
# Script to sync _resources directory and active ports from MacPorts main repo
# Uses efficient methods to avoid full repo cloning

set -euo pipefail

# Configuration
MACPORTS_REPO="https://github.com/macports/macports-ports.git"
BRANCH="master"  # MacPorts uses 'master' not 'main'
TARGET_DIR="_resources"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(dirname "$SCRIPT_DIR")"

# Discover active port paths by finding Portfiles
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}
# We need to define colors first before using log_info
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Find all active port paths in the repository
ACTIVE_PORTS=()
while IFS= read -r -d '' portfile; do
    # Get the directory containing the Portfile and convert to relative path
    port_dir=$(dirname "$portfile")
    # Remove the repo root prefix to get relative path like "net/netatalk4"
    relative_path="${port_dir#$REPO_ROOT/}"
    # Skip if it's in _resources or scripts directories
    if [[ "$relative_path" != _resources* ]] && [[ "$relative_path" != scripts* ]] && [[ "$relative_path" != .* ]]; then
        ACTIVE_PORTS+=("$relative_path")
    fi
done < <(find "$REPO_ROOT" -name "Portfile" -type f -print0)

# Helper functions
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Sync _resources directory and active ports from MacPorts main repository"
    echo ""
    echo "OPTIONS:"
    echo "  --branch BRANCH       Use specific branch (default: master)"
    echo "  --force              Force overwrite existing directories"
    echo "  --resources-only     Sync only _resources directory"
    echo "  --ports-only         Sync only active port directories"
    echo "  --list-ports         Show discovered active ports and exit"
    echo "  --help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                           # Sync _resources and all active ports"
    echo "  $0 --resources-only          # Sync only _resources directory"
    echo "  $0 --ports-only              # Sync only active port directories"
    echo "  $0 --list-ports              # Show discovered active ports"
    echo "  $0 --branch release-2.9      # Sync from specific branch"
    echo "  $0 --force                   # Force overwrite existing files"
}

# Parse arguments
FORCE=false
RESOURCES_ONLY=false
PORTS_ONLY=false
LIST_PORTS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --branch)
            BRANCH="$2"
            shift 2
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --resources-only)
            RESOURCES_ONLY=true
            shift
            ;;
        --ports-only)
            PORTS_ONLY=true
            shift
            ;;
        --list-ports)
            LIST_PORTS=true
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
        *)
            echo "Error: Unexpected argument: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Show discovered ports if requested
if [ "$LIST_PORTS" = true ]; then
    echo "Discovered active ports in repository:"
    if [ ${#ACTIVE_PORTS[@]} -eq 0 ]; then
        echo "  No Portfiles found"
    else
        for port in "${ACTIVE_PORTS[@]}"; do
            echo "  $port"
        done
    fi
    echo ""
    echo "Total: ${#ACTIVE_PORTS[@]} active ports"
    exit 0
fi

log_info "Syncing from MacPorts repository"
log_info "Repository: $MACPORTS_REPO"
log_info "Branch: $BRANCH"
log_info "Discovered ${#ACTIVE_PORTS[@]} active ports"

cd "$REPO_ROOT"

# Function to sync a specific directory using multiple methods
sync_directory() {
    local dir_path="$1"
    local dir_name="$(basename "$dir_path")"
    
    log_info "Syncing directory: $dir_path"
    
    # Check if target directory exists
    if [ -d "$dir_path" ] && [ "$FORCE" != true ]; then
        log_warning "$dir_path directory already exists, skipping (use --force to overwrite)"
        return 0
    fi
    
    # Method 1: Try git archive (most efficient)
    if command -v git >/dev/null 2>&1; then
        if git archive --remote="$MACPORTS_REPO" --format=tar "$BRANCH" "$dir_path" | tar -xf - 2>/dev/null; then
            log_success "Successfully synced $dir_path using git archive"
            return 0
        fi
    fi
    
    # Method 2: Try GitHub CLI with API
    if command -v gh >/dev/null 2>&1; then
        local temp_dir=$(mktemp -d)
        trap "rm -rf $temp_dir" EXIT
        
        if gh api repos/macports/macports-ports/tarball/"$BRANCH" > "$temp_dir/repo.tar.gz" 2>/dev/null; then
            cd "$temp_dir"
            if tar -xzf repo.tar.gz 2>/dev/null; then
                # Find the extracted directory (GitHub adds a prefix)
                local extracted_dir=$(find . -maxdepth 1 -type d -name "macports-macports-ports-*" | head -1)
                if [ -n "$extracted_dir" ] && [ -d "$extracted_dir/$dir_path" ]; then
                    cd "$REPO_ROOT"
                    # Remove existing directory if force is enabled
                    if [ "$FORCE" = true ] && [ -d "$dir_path" ]; then
                        rm -rf "$dir_path"
                    fi
                    # Create parent directory if it doesn't exist
                    mkdir -p "$(dirname "$dir_path")"
                    cp -r "$temp_dir/$extracted_dir/$dir_path" "$dir_path"
                    log_success "Successfully synced $dir_path using GitHub CLI"
                    return 0
                fi
            fi
        fi
    fi
    
    # Method 3: Shallow clone with sparse checkout
    if command -v git >/dev/null 2>&1; then
        local temp_dir=$(mktemp -d)
        trap "rm -rf $temp_dir" EXIT
        
        cd "$temp_dir"
        if git clone --depth 1 --branch "$BRANCH" --filter=blob:none --sparse "$MACPORTS_REPO" macports 2>/dev/null; then
            cd macports
            git sparse-checkout set "$dir_path"
            if [ -d "$dir_path" ]; then
                cd "$REPO_ROOT"
                # Remove existing directory if force is enabled
                if [ "$FORCE" = true ] && [ -d "$dir_path" ]; then
                    rm -rf "$dir_path"
                fi
                # Create parent directory if it doesn't exist
                mkdir -p "$(dirname "$dir_path")"
                cp -r "$temp_dir/macports/$dir_path" "$dir_path"
                log_success "Successfully synced $dir_path using sparse checkout"
                return 0
            fi
        fi
    fi
    
    # Method 4: Full shallow clone (fallback)
    if command -v git >/dev/null 2>&1; then
        local temp_dir=$(mktemp -d)
        trap "rm -rf $temp_dir" EXIT
        
        cd "$temp_dir"
        if git clone --depth 1 --branch "$BRANCH" "$MACPORTS_REPO" macports; then
            if [ -d "macports/$dir_path" ]; then
                cd "$REPO_ROOT"
                # Remove existing directory if force is enabled
                if [ "$FORCE" = true ] && [ -d "$dir_path" ]; then
                    rm -rf "$dir_path"
                fi
                # Create parent directory if it doesn't exist
                mkdir -p "$(dirname "$dir_path")"
                cp -r "$temp_dir/macports/$dir_path" "$dir_path"
                log_success "Successfully synced $dir_path using full shallow clone"
                return 0
            else
                log_error "$dir_path directory not found in repository"
                return 1
            fi
        else
            log_error "Failed to clone repository for $dir_path"
            return 1
        fi
    fi
    
    log_error "All sync methods failed for $dir_path"
    return 1
}

# Sync _resources directory unless --ports-only is specified
if [ "$PORTS_ONLY" != true ]; then
    sync_directory "$TARGET_DIR"
    if [ -d "$TARGET_DIR" ]; then
        file_count=$(find "$TARGET_DIR" -type f | wc -l | tr -d ' ')
        log_info "_resources contains $file_count files"
    fi
fi

# Sync active port directories unless --resources-only is specified
if [ "$RESOURCES_ONLY" != true ]; then
    if [ ${#ACTIVE_PORTS[@]} -eq 0 ]; then
        log_warning "No active ports found to sync"
    else
        log_info "Syncing ${#ACTIVE_PORTS[@]} active port directories..."
        
        synced_count=0
        failed_count=0
        
        for port_path in "${ACTIVE_PORTS[@]}"; do
            if sync_directory "$port_path"; then
                ((synced_count++))
            else
                ((failed_count++))
            fi
        done
        
        log_info "Port sync summary: $synced_count synced, $failed_count failed"
        
        if [ $failed_count -gt 0 ]; then
            log_warning "Some ports failed to sync. Check network connection and try again."
        fi
    fi
fi

log_success "Sync operation completed!"

# Show final summary
if [ "$PORTS_ONLY" != true ] && [ -d "$TARGET_DIR" ]; then
    echo "üìÅ _resources directory updated"
fi

if [ "$RESOURCES_ONLY" != true ] && [ ${#ACTIVE_PORTS[@]} -gt 0 ]; then
    echo "üì¶ Active ports processed: ${#ACTIVE_PORTS[@]}"
    echo "üîç Port directories:"
    for port in "${ACTIVE_PORTS[@]}"; do
        if [ -d "$port" ]; then
            echo "   ‚úÖ $port"
        else
            echo "   ‚ùå $port (failed)"
        fi
    done
fi 