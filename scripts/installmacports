#!/bin/bash
set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob nocaseglob

# determine CPU architecture
ARCH=$(uname -m)
ARCH=${ARCH/x86_64/amd64}
ARCH=${ARCH/aarch64/arm64}

# get latest release version from github for macports
echo "Fetching latest MacPorts release version..."
PORT_LATEST_RELEASE=$(curl -s https://api.github.com/repos/macports/macports-base/releases/latest | grep tag_name | cut -d '"' -f 4)
if [ -z "$PORT_LATEST_RELEASE" ]; then
  echo "Error: Failed to fetch latest MacPorts release version"
  exit 1
fi
PORT_LATEST_RELEASE_NUMBER=${PORT_LATEST_RELEASE#v}

# get macOS operating system version long name including california parks using system_profiler
MACOS_VERSION=$(sw_vers --ProductVersion | cut -d . -f1)
MACOS_VERSION_NAME=$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'macOS ' '{print $NF}' | awk '{print substr($0, 0, length($0)-1)}')

# track if we need to sync macports
NEED_SYNC=false

## Set up blakeports symlink and directory structure
#echo "Setting up BlakePorts directory structure..."
#mkdir -p ~/code

# path to self and parent dir
SCRIPT=$(realpath $0)
SCRIPTPATH=$(dirname $SCRIPT)

## Create symlink if it doesn't exist
#if [ ! -e ~/code/blakeports ]; then
#  echo "Creating symlink to blakeports..."
#  ln -s "$BLAKEPORTS_ROOT" ~/code/blakeports
#else
#  echo "✓ BlakePorts already exists at ~/code/blakeports"
#fi

# test for macports and install if not present
if [ ! -f /opt/local/bin/port ]; then
  echo "Installing macports..."
  if [[ $MACOS_VERSION -ge 26 ]]; then
    #cd
    echo "macOS version $MACOS_VERSION is not supported by macports installer"
    echo "Attempting install from source..."
    curl -O https://distfiles.macports.org/MacPorts/MacPorts-${PORT_LATEST_RELEASE_NUMBER}.tar.bz2
    tar xf MacPorts-${PORT_LATEST_RELEASE_NUMBER}.tar.bz2
    cd MacPorts-${PORT_LATEST_RELEASE_NUMBER}/
    ./configure >/dev/null
    make >/dev/null
    sudo make install >/dev/null
    cd $SCRIPTPATH
    rm -rf MacPorts-${PORT_LATEST_RELEASE_NUMBER}*
  else
    MACPORTS_PKG="https://github.com/macports/macports-base/releases/download/${PORT_LATEST_RELEASE}/MacPorts-${PORT_LATEST_RELEASE_NUMBER}-${MACOS_VERSION}-${MACOS_VERSION_NAME}.pkg"
    echo $MACPORTS_PKG
    curl -s -L -o $SCRIPTPATH/macports.pkg $MACPORTS_PKG
    sudo installer -pkg $SCRIPTPATH/macports.pkg -target / || true
    rm $SCRIPTPATH/macports.pkg
    # MacPorts package installer handles initial sync, no need to sync again
  fi
  # I don't know why this is needed, but it is
  if [ ! -d /opt/local/var/macports/home ]; then
    echo "Creating missing MacPorts directory: /opt/local/var/macports/home"
    sudo mkdir -p /opt/local/var/macports/home
  fi

  NEED_SYNC=true
else
  echo "✓ MacPorts already installed"
fi

# configure macports sources
if ! grep -q "blakeports" /opt/local/etc/macports/sources.conf; then
  echo "Configuring macports /opt/local/etc/macports/sources.conf"
  sudo tee /opt/local/etc/macports/sources.conf <<EOF
file:///opt/actions-runner/_work/blakeports/blakeports [default]
https://mirror.fcix.net/macports/release/tarballs/ports.tar
EOF
fi
## configure macports archive sites
#if ! grep -q "fcix" /opt/local/etc/macports/archive_sites.conf; then
#  echo "Configuring macports /opt/local/etc/macports/archive_sites.conf"
#  sudo tee /opt/local/etc/macports/archive_sites.conf <<EOF
## MacPorts configuration file for binary archive sources.
#
## disable default by uncommenting the following line
#name                	macports_archives
#
## MacPorts archive site fcix
#name               	fcix
#urls                https://mirror.fcix.net/macports/packages/
#
## MIT archive site
#name                  mit
#urls                  http://bos.us.packages.macports.org/
#
#EOF
#fi
#
## configure macports.conf
#if ! grep -q "fcix" /opt/local/etc/macports/macports.conf; then
#  echo "Configuring macports /opt/local/etc/macports/macports.conf"
#  sudo tee -a /opt/local/etc/macports/macports.conf <<EOF
## MacPorts system-wide configuration file.
## Commented-out values are defaults unless otherwise noted.
#
## Directory under which MacPorts should install ports. This must be
## where MacPorts itself is installed.
#prefix              	/opt/local
#
## User to run operations as when MacPorts drops privileges.
##macportsuser        	macports
#
## Directory for MacPorts working data.
#portdbpath          	/opt/local/var/macports
#
## Colon-delimited list of directories to search for external tools
## (make(1), pkg-config(1), etc.). While installing ports, MacPorts uses
## this list for PATH. Changing this setting is intended for advanced
## users only and is unsupported.
##binpath             	/opt/local/bin:/opt/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin
#
## Directory containing Xcode Tools. By default, MacPorts determines this
## using xcode-select(1).
##developer_dir       	/Library/Developer/CommandLineTools
#
## Location of PackageMaker. Defaults to
## /Applications/Utilities/PackageMaker.app" with Xcode
## 4.2 and earlier and "/Applications/PackageMaker.app" with 4.3 and later.
##packagemaker_path   	/Applications/PackageMaker.app
#
## Directory for application bundles installed by ports.
#applications_dir    	/Applications/MacPorts
#
## Directory for frameworks installed by ports.
#frameworks_dir      	/opt/local/Library/Frameworks
#
## Location of the MacPorts sources list.
#sources_conf        	/opt/local/etc/macports/sources.conf
#
## Location of the MacPorts global variants definition file. Optional.
#variants_conf       	/opt/local/etc/macports/variants.conf
#
## When MacPorts should build ports from source.
## - ifneeded: Download binary archives if available; build from source
##   otherwise.
## - always: Always build from source; never try fetching archives.
## - never: Never build from source; try fetching archives and abort if
##   unavailable.
##buildfromsource     	ifneeded
#
## Type of archive to use for port images. Supported types are cpgz,
## cpio, tar, tbz, tbz2, tgz, tlz, txz, xar, zip.
##portarchivetype     	tbz2
#
## Apply transparent filesystem compression to files on activation.
## Requires bsdtar with support for --hfsCompression in binpath, which can be
## provided by installing the libarchive port. This will work with HFS+ or APFS
## volumes only and will be ignored on other filesystems.
##hfscompression      	yes
#
## CPU architecture to target. Supported values are "ppc", "ppc64",
## "i386", "x86_64", and "arm64". Defaults to:
## - Mac OS X 10.5 and earlier: "ppc" on PowerPC, otherwise "i386".
## - Mac OS X 10.6 - 10.15: "x86_64" on 64-bit Intel, otherwise "i386".
## - macOS 11 and later: "arm64" on Apple Silicon, otherwise "x86_64".
##build_arch          	x86_64
#
## Space-delimited list of CPU architectures to target when building
## universal. Defaults to "i386 ppc" on Mac OS X 10.5 and earlier,
## "x86_64 i386" on Mac OS X 10.6 through macOS 10.13, "x86_64" on
## macOS 10.14 and 10.15 (these SDKs are not universal), and
## "arm64 x86_64" on macOS 11 and later. Set an empty value to disable
## universal building.
##universal_archs     	arm64 x86_64
#
## Use ccache, a compiler cache for C, C++, Objective-C, and
## Objective-C++. (See http://ccache.samba.org.) The "ccache" executable
## must exist in one of the directories in binpath.
##configureccache     	no
#
## Directory for ccache's cached compiler output.
##ccache_dir          	/opt/local/var/macports/build/.ccache
#
## Maximum size of files stored in ccache's cache. Append "G", "M", or
## "K" for gigabytes, megabytes, or kilobytes.
##ccache_size         	2G
#
## Use distcc, a distributed compiler for C, C++, Objective-C, and
## Objective-C++. (See http://distcc.org.) The "distcc" executable must
## exist in one of the directories in binpath.
##configuredistcc     	no
#
## Use pipes rather than temporary files for communication between the
## various stages of C, C++, Objective-C, and Objective-C++ compilation.
##configurepipe       	yes
#
## Lowered scheduling priority to use for commands run during configure,
## build, and destroot. Accepted values are 0 (normal priority) through
## 20 (lowest priority).
##buildnicevalue      	0
#
## Number of simultaneous make(1) jobs to use when building ports. If set
## to 0, the number of jobs will be the lesser of:
## - number of automatically-detected CPU cores
## - gigabytes of physical memory + 1
##buildmakejobs       	0
#
## umask value to use when a port installs its files.
##destroot_umask      	022
#
## Automatically execute "clean" after "install" of ports.
##portautoclean       	yes
#
## Keep logs after successful installations.
##keeplogs            	no
#
## The rsync server for fetching MacPorts base during selfupdate. This
## setting is NOT used when downloading ports trees; ports trees are
## configured using the file referenced by sources_conf. See
## https://trac.macports.org/wiki/Mirrors#MacPortsSource for a list of
## available servers.
##rsync_server        	rsync.macports.org
#
## Location of MacPorts base sources on rsync_server. If this references
## a .tar file, a signed .rmd160 file must exist in the same directory
## and will be used to verify its integrity. See
## https://trac.macports.org/wiki/Mirrors#MacPortsSource to find the
## correct rsync_dir for a particular rsync_server.
##rsync_dir           	macports/release/tarballs/base.tar
#
## Options to pass to rsync when fetching MacPorts base and the ports tree.
##rsync_options       	-rtzvl --delete-after
#
## Type of generated StartupItems.
## - launchd: Create StartupItems for use with launchd.
## - default: Create StartupItems for launchd on macOS and none on
##   other platforms.
## - none: Disable creation of StartupItems.
## This setting only applies when building ports from source.
##startupitem_type    	default
#
## Create system-level symlinks to generated StartupItems. If set to
## "no", symlinks will not be created; otherwise, symlinks will be placed
## in /Library/LaunchDaemons or /Library/LaunchAgents as appropriate.
## This setting only applies when building ports from source.
##startupitem_install	yes
#
## Whether to allow ports to automatically load their StartupItems.
## If set to "no", StartupItems will never be loaded unless the user
## explicitly requests it. If set to "yes" (the default), some ports may
## automatically load their StartupItems when they are activated.
##startupitem_autostart  yes
#
## Extra environment variables to keep. MacPorts sanitizes its
## environment while processing ports, keeping:
## - DISPLAY
## - DYLD_FALLBACK_FRAMEWORK_PATH, DYLD_FALLBACK_LIBRARY_PATH,
##   DYLD_FRAMEWORK_PATH, DYLD_INSERT_LIBRARIES, DYLD_LIBRARY_PATH
## - JAVA_HOME
## - ARCHIVE_SITE_LOCAL, MASTER_SITE_LOCAL, PATCH_SITE_LOCAL
## - PORTSRC
## - ALL_PROXY, FTP_PROXY, http_proxy, HTTPS_PROXY, NO_PROXY, RSYNC_PROXY
## - GROUP, USER
## - COLUMNS, LINES
## Variables listed in extra_env are added to this list. This has no
## default value; setting it is intended for advanced users and is
## unsupported. (Note that sudo(8) sanitizes its environment on Mac OS X 10.5
## and later, so it may have to be configured to pass the desired
## variables to MacPorts.)
##extra_env           	KEEP_THIS THIS_TOO
#
## Override proxy-related environment variables. By default, MacPorts
## takes proxy settings from the environment, from the proxy_* options
## below, and from Network Preferences, in that order. If this is set to
## "yes", MacPorts uses proxy_*, then Network Preferences, then the
## environment. (Note that Network Preferences does not have a setting
## for rsync proxies. Also note that sudo(8) sanitizes its environment on
## Mac OS X 10.5 and later, so it may have to be configured to pass desired
## variables to MacPorts.)
##proxy_override_env  	no
#
## Proxies. These have no default values. The analogous environment
## variables are "http_proxy", "HTTPS_PROXY", "FTP_PROXY", and
## "RSYNC_PROXY".
##proxy_http          	proxy1:12345
##proxy_https         	proxy2:67890
##proxy_ftp           	proxy3:02139
##proxy_rsync         	proxy4:11377
#
## Comma-delimited list of hosts that MacPorts should not access through
## the HTTP, HTTPS, and FTP proxies. This does not apply to rsync, and it
## has no default value.
##proxy_skip          	host1, host2, host3
#
## Space-delimited lists of glob patterns matched against download hosts
## that MacPorts should not use and that MacPorts should prefer, respectively,
## overriding the usual ping time checks. These have no default values.
#host_blacklist      packages.macports.org distfiles.macports.org rsync.macports.org
#preferred_hosts       mirror.fcix.net
#
## Whether MacPorts should automatically run rev-upgrade after upgrading
## ports.
##revupgrade_autorun  	yes
#
## Whether rev-upgrade should automatically rebuild ports with broken
## linking or merely report the breakage. Supported values are "report"
## and "rebuild".
##revupgrade_mode     	rebuild
#
## Space-delimited list of files and directories to delete after the
## unarchive stage and before creating a pkg. Paths are interpreted
## relative to prefix, and there is no default value. This is useful for
## removing unnecessary files and directories prior to pkg or mpkg
## deployment.
##pkg_post_unarchive_deletions	include share/doc share/man
#
## Whether the user interface should ask interactive questions
##ui_interactive         yes
#EOF
#fi

# add macports to path in .zshrc (idempotent)
if ! grep -q "# MacPorts configuration" ~/.zshrc 2>/dev/null; then
  cat <<'EOF' >>~/.zshrc

# MacPorts configuration
export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
export MANPATH="/opt/local/share/man:$MANPATH"
EOF
  echo "Added MacPorts configuration to .zshrc"
else
  echo "✓ MacPorts configuration already exists in .zshrc"
fi

# set up macports environment for current session
export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
export MANPATH="/opt/local/share/man:${MANPATH:-}"

# sync macports to update port index (only if needed)
if [[ "$NEED_SYNC" == "true" ]]; then
  echo "Syncing MacPorts port index..."
  sudo port sync
else
  echo "✓ Skipping port sync - no changes detected"
fi

echo "✓ MacPorts setup complete!"

exit 0
