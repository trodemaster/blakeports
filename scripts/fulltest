#!/usr/bin/env bash

# BlakePorts Full Test Script
# Recreates all GitHub runners and triggers all port builds for comprehensive testing

set -e

# Path to self and parent dir
SCRIPT=$(realpath $0)
SCRIPTPATH=$(dirname $SCRIPT)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
GHRUNNER_SCRIPT="$SCRIPTPATH/ghrunner"
RUNNERS=("macOS_15" "macOS_26_Beta")
WORKFLOWS=(
    "Build libcbor"
    "Build libfido2" 
    "Build bstring"
    "Build netatalk4"
    "Build nrsc5"
)

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo
    echo "=================================================================="
    echo -e "${GREEN}$1${NC}"
    echo "=================================================================="
}

# Function to check if ghrunner script exists
check_ghrunner() {
    if [ ! -f "$GHRUNNER_SCRIPT" ]; then
        print_error "ghrunner script not found at: $GHRUNNER_SCRIPT"
        exit 1
    fi
    
    if [ ! -x "$GHRUNNER_SCRIPT" ]; then
        print_error "ghrunner script is not executable: $GHRUNNER_SCRIPT"
        exit 1
    fi
}

# Function to remove all existing runners for clean state
teardown_runners() {
    print_header "PHASE 1: Tearing Down All Existing Runners (Clean Slate)"
    
    # First, get current runner status to see what exists
    print_info "Checking current runner state..."
    local runner_list_output
    if runner_list_output=$("$GHRUNNER_SCRIPT" -list 2>/dev/null); then
        echo "$runner_list_output"
    else
        print_warning "Could not get runner list, proceeding with removal anyway"
    fi
    
    # Remove each runner with verification
    for runner in "${RUNNERS[@]}"; do
        print_info "Removing runner: $runner"
        local runner_vm_name="${runner}_runner"
        
        # Step 1: Remove via ghrunner (handles service stop, GitHub removal, etc.)
        if "$GHRUNNER_SCRIPT" -remove "$runner"; then
            print_success "ghrunner removal completed for $runner"
        else
            print_warning "ghrunner removal failed for $runner, trying manual cleanup"
        fi
        
        # Step 2: Ensure VM is actually stopped and deleted (belt and suspenders)
        print_info "Verifying VM cleanup for $runner_vm_name..."
        if tart list | grep -q "$runner_vm_name"; then
            print_warning "VM $runner_vm_name still exists, forcing cleanup..."
            
            # Force stop if running
            tart stop "$runner_vm_name" 2>/dev/null || print_info "VM was already stopped"
            
            # Wait a moment for clean shutdown
            sleep 3
            
            # Force delete
            if tart delete "$runner_vm_name" 2>/dev/null; then
                print_success "Successfully force-deleted VM $runner_vm_name"
            else
                print_error "Failed to delete VM $runner_vm_name - manual intervention may be needed"
            fi
        else
            print_success "VM $runner_vm_name successfully removed"
        fi
        
        # Brief pause between runners to avoid race conditions
        sleep 2
    done
    
    # Final verification - wait for all VMs to be completely gone
    print_info "Waiting for complete VM cleanup..."
    local max_wait=30
    local waited=0
    while [ $waited -lt $max_wait ]; do
        local remaining_vms=0
        for runner in "${RUNNERS[@]}"; do
            local runner_vm_name="${runner}_runner"
            if tart list | grep -q "$runner_vm_name"; then
                remaining_vms=$((remaining_vms + 1))
            fi
        done
        
        if [ $remaining_vms -eq 0 ]; then
            print_success "All runner VMs successfully removed"
            break
        fi
        
        print_info "Still waiting for $remaining_vms VM(s) to be removed... ($waited/$max_wait)"
        sleep 2
        waited=$((waited + 2))
    done
    
    if [ $waited -ge $max_wait ]; then
        print_warning "Timeout waiting for all VMs to be removed, but proceeding..."
        tart list | grep "_runner" || print_info "No runner VMs found in final check"
    fi
    
    print_success "Complete runner teardown completed"
}

# Function to create all runners fresh
setup_runners() {
    print_header "PHASE 2: Creating Fresh Runners"
    
    for runner in "${RUNNERS[@]}"; do
        print_info "Creating fresh runner: $runner"
        if "$GHRUNNER_SCRIPT" -tart "$runner"; then
            print_success "Successfully created $runner"
        else
            print_error "Failed to create $runner"
            exit 1
        fi
    done
    
    print_success "All runners created fresh"
}

# Function to wait for runners to come online
wait_for_runners() {
    print_header "PHASE 3: Waiting for All Runners to Come Online"
    
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        print_info "Verifying runner readiness... (attempt $((attempt + 1))/$max_attempts)"
        
        # Get fresh runner status
        local runner_list_output
        if ! runner_list_output=$("$GHRUNNER_SCRIPT" -list 2>/dev/null); then
            print_warning "Failed to get runner status, retrying..."
            attempt=$((attempt + 1))
            sleep 10
            continue
        fi
        
        # Check each runner
        local all_ready=true
        for runner in "${RUNNERS[@]}"; do
            local status="unknown"
            local busy="unknown"
            
            if echo "$runner_list_output" | grep -q "^$runner "; then
                status=$(echo "$runner_list_output" | grep "^$runner " | awk '{print $2}' || echo "unknown")
                busy=$(echo "$runner_list_output" | grep "^$runner " | awk '{print $3}' || echo "unknown")
            fi
            
            if [ "$status" != "online" ] || [ "$busy" = "true" ]; then
                all_ready=false
                print_info "$runner: status=$status, busy=$busy (waiting...)"
            else
                print_success "$runner: ready"
            fi
        done
        
        if [ "$all_ready" = true ]; then
            print_success "All runners are online and ready!"
            break
        fi
        
        if [ $attempt -eq $((max_attempts - 1)) ]; then
            print_error "Timeout waiting for runners to be ready"
            echo "$runner_list_output"
            exit 1
        fi
        
        attempt=$((attempt + 1))
        sleep 10
    done
    
    # Final status check
    print_info "Final runner status:"
    "$GHRUNNER_SCRIPT" -list
}

# Function to trigger all workflow builds
trigger_builds() {
    print_header "PHASE 4: Triggering All Port Builds"
    print_info "Note: MacPorts and BlakePorts setup is now handled automatically by each build workflow via scripts/installmacports."
    
    for workflow in "${WORKFLOWS[@]}"; do
        print_info "Triggering: $workflow"
        if gh workflow run "$workflow"; then
            print_success "Successfully triggered: $workflow"
        else
            print_error "Failed to trigger: $workflow"
        fi
        
        # Brief pause between workflow triggers
        sleep 2
    done
    
    print_success "All workflows triggered"
}

# Function to show build status
show_build_status() {
    print_header "PHASE 5: Build Status Summary"
    
    print_info "Recent workflow runs:"
    gh run list --limit 10
    
    echo
    print_info "To monitor builds in real-time:"
    echo "  gh run watch                    # Watch latest run"  
    echo "  gh run view -w                  # Open in browser"
    echo "  gh run list --status in_progress   # Show running builds"
    
    echo
    print_info "To check runner status:"
    echo "  $GHRUNNER_SCRIPT -list"
    
    echo
    print_info "To view matrix job details:"
    echo "  gh run view --json jobs --jq '.jobs[] | {name: .name, runner_name: .runner_name, status: .status}'"
}

# Main execution
main() {
    print_header "BlakePorts Full Test Script"
    print_info "This script will:"
    print_info "  1. Tear down ALL existing GitHub runners (clean slate)"
    print_info "  2. Create fresh runners for both macOS versions"  
    print_info "  3. Wait for all runners to come online"
    print_info "  4. Trigger all port build workflows (each will set up MacPorts/BlakePorts as needed)"
    print_info "  5. Show status summary"
    echo
    print_info "Clean slate approach:"
    print_info "  ðŸ§¹ Complete teardown ensures no lingering issues"
    print_info "  ðŸ”„ Fresh runners guarantee known good state"
    print_info "  ðŸ§ª Reliable, repeatable comprehensive testing"
    print_info "  âš¡ MacPorts/BlakePorts setup is now consolidated and idempotent via scripts/installmacports"
    
    echo
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Aborted by user"
        exit 0
    fi
    
    # Pre-flight checks
    check_ghrunner
    
    # Check if gh CLI is available and authenticated
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) is required but not installed"
        exit 1
    fi
    
    if ! gh auth status &> /dev/null; then
        print_error "GitHub CLI not authenticated. Please run 'gh auth login'"
        exit 1
    fi
    
    # Execute phases
    teardown_runners
    setup_runners  
    wait_for_runners
    trigger_builds
    show_build_status
    
    print_header "FULL TEST COMPLETED SUCCESSFULLY! ðŸŽ‰"
    print_success "All runners recreated fresh and builds triggered"
    print_info "Monitor progress with: gh run list"
}

# Run main function
main "$@"
